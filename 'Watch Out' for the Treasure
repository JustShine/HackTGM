#include "U8glib.h"
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE | U8G_I2C_OPT_DEV_0); // I2C / TWI
#define buton 5
#include <SoftwareSerial.h>
SoftwareSerial BTserial(6, 7); // RX | TX
// Connect the HC-05 TX to Arduino pin 2 RX.
// Connect the HC-05 RX to Arduino pin 3 TX through a voltage divider.
char c = ' ';
int rowCounter = 0; // row counter
int columnCounter = 0; // column counter
int foundColumn = 0;
boolean foundCol = false;
int keyValue = 0;
int noKey = 0;
boolean readKey = false;
int debounce = 50; // set this to the lowest value that gives the best result
const int row1 = 2, row2 = 3, row3 = 4, row4 = 5, colA = 8, colB = 9, colC = 10, colD = 11, ledPin = 13; // onboard LED
int corect = 0;
int ok1 = 1, ok2 = 1, ok3 = 1, ok4 = 1, ok5 = 1, ok6 = 1, ok7 = 1, ok8 = 1, ok9 = 1, ok10 = 1, ok11 = 1, ok12 = 1, ok13 = 1, ok14 = 1, ok15 = 1, ok16 = 1;
char poz11[] = "O", poz12[] = "O", poz13[] = "O", poz14[] = "O";
char poz21[] = "O", poz22[] = "O", poz23[] = "O", poz24[] = "O";
char poz31[] = "O", poz32[] = "O", poz33[] = "O", poz34[] = "O";
char poz41[] = "O", poz42[] = "O", poz43[] = "O", poz44[] = "O";
int w1 = 10, w2 = 40, w3 = 70, w4 = 100;
int h1 = 26, h2 = 38, h3 = 50, h4 = 62;
int left = 5;
int start = 0;
char text[] =  "  Waitting for";
char text2[] = " the  treasures";
char text3[] = "  to be placed";
char s[] = "No moves!";
void pauza(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", text);
  u8g.drawStr( 0, 13, buf);
}
void pauza2(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", text2);
  u8g.drawStr( 0, 26, buf);
}
void pauza3(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", text3);
  u8g.drawStr( 0, 40, buf);
}
void ramas(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, " %d tries left!", left);
  u8g.drawStr( 0, 13, buf);
}
void numai(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "  You found %d", corect);
  u8g.drawStr( 0, 13, buf);
}
void draw11(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz11);
  u8g.drawStr( w1, h1, buf);
}
void draw12(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz12);
  u8g.drawStr( w2, h1, buf);
}
void draw13(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz13);
  u8g.drawStr( w3, h1, buf);

}
void draw14(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz14);
  u8g.drawStr( w4, h1, buf);
}
void draw21(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz21);
  u8g.drawStr( w1, h2, buf);
}
void draw22(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz22);
  u8g.drawStr( w2, h2, buf);
}
void draw23(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz23);
  u8g.drawStr( w3, h2, buf);

}
void draw24(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz24);
  u8g.drawStr( w4, h2, buf);
}
void draw31(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz31);
  u8g.drawStr( w1, h3, buf);
}
void draw32(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz32);
  u8g.drawStr( w2, h3, buf);
}
void draw33(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz33);
  u8g.drawStr( w3, h3, buf);

}
void draw34(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz34);
  u8g.drawStr( w4, h3, buf);
}
void draw41(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz41);
  u8g.drawStr( w1, h4, buf);
}
void draw42(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz42);
  u8g.drawStr( w2, h4, buf);
}
void draw43(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz43);
  u8g.drawStr( w3, h4, buf);

}
void draw44(void)
{
  u8g.setFont(u8g_font_unifont);
  enum {BufSize = 900};
  char buf[BufSize];
  snprintf(buf, BufSize, "%s", poz44);
  u8g.drawStr( w4, h4, buf);
}

int mapa = 5;
char prim1 = 'z';
char prim2 = 'z';
char prim3 = 'z';
char prim4 = 'z';
char prim5 = 'z';
void setup(void)
{

  Serial.begin(9600);
  Serial.println("Arduino is ready");
  Serial.println("Remember to select Both NL & CR in the serial monitor");
  // HC-05 default serial speed for AT mode is 38400
  BTserial.begin(38400);
  pinMode(buton, INPUT_PULLUP);
  pinMode(row1, OUTPUT);
  pinMode(row2, OUTPUT);
  pinMode(row3, OUTPUT);
  pinMode(row4, OUTPUT);
  pinMode(colA, INPUT_PULLUP);
  pinMode(colB, INPUT_PULLUP);
  pinMode(colC, INPUT_PULLUP);
  pinMode(colD, INPUT_PULLUP);
}

int a[4][4] = {0};
void loop(void)
{
  if (BTserial.available() && mapa > 0)
  {
    if (mapa == 5) {
      prim1 = BTserial.read();
      Serial.println(prim1);
    }
    if (mapa == 4) {
      prim2 = BTserial.read();
      Serial.println(prim2);
    }
    if (mapa == 3) {
      prim3 = BTserial.read();
      Serial.println(prim3);
    }
    if (mapa == 2) {
      prim4 = BTserial.read();
      Serial.println(prim4);
    }
    if (mapa == 1) {
      prim5 = BTserial.read();
      Serial.println(prim5);
    }
    mapa--;
  }
  if (noKey == 16) { // no keys were pressed
    readKey = true; // keyboard is ready to accept a new keypress
  }
  noKey = 0;
  for (rowCounter = row1; rowCounter < (row4 + 1); rowCounter++) {
    scanRow(); // switch on one row at a time
    for (columnCounter = colA; columnCounter < colD + 1; columnCounter++) {
      readColumn(); // read the switch pressed
      if (foundCol == true) {
        keyValue = (rowCounter - row1) + 4 * (columnCounter - colA);
      }
    }
  }
  if (readKey == true && noKey == 15 && left != 0) { // a key has been pressed
    {
      Serial.println(keyValue); // used for debug
      switch (keyValue + 1)
      {
        case 1: if (ok1) {
            strcpy(poz11, "X");
            ok1 = 0;
            left--;
            if (a[0][0] == 1) {
              corect++;
              strcpy(poz11, "$");
              Serial.println(corect);
            }
          } break;
        case 5: if (ok2) {
            strcpy(poz12, "X");
            ok2 = 0;
            left--;
            if (a[0][1] == 1) {
              corect++;
              strcpy(poz12, "$");
              Serial.println(corect);
            }
          } break;
        case 9: if (ok3) {
            strcpy(poz13, "X");
            ok3 = 0;
            left--;
            if (a[0][2] == 1) {
              corect++;
              strcpy(poz13, "$");
              Serial.println(corect);
            }
          } break;
        case 13: if (ok4) {
            strcpy(poz14, "X");
            ok4 = 0;
            left--;
            if (a[0][3] == 1) {
              corect++;
              strcpy(poz14, "$");
              Serial.println(corect);
            }
          } break;
        case 2: if (ok5) {
            strcpy(poz21, "X");
            ok5 = 0;
            left--;
            if (a[1][0] == 1) {
              corect++;
              strcpy(poz21, "$");
              Serial.println(corect);
            }
          } break;
        case 6: if (ok6) {
            strcpy(poz22, "X");
            ok6 = 0;
            left--;
            if (a[1][1] == 1) {
              corect++;
              strcpy(poz22, "$");
              Serial.println(corect);
            }
          } break;
        case 10: if (ok7) {
            strcpy(poz23, "X");
            ok7 = 0;
            left--;
            if (a[1][2] == 1) {
              corect++;
              strcpy(poz23, "$");
              Serial.println(corect);
            }
          } break;
        case 14: if (ok8) {
            strcpy(poz24, "X");
            ok8 = 0;
            left--;
            if (a[1][3] == 1) {
              corect++;
              strcpy(poz24, "$");
              Serial.println(corect);
            }
          } break;
        case 3: if (ok9) {
            strcpy(poz31, "X");
            ok9 = 0;
            left--;
            if (a[2][0] == 1) {
              corect++;
              strcpy(poz31, "$");
              Serial.println(corect);
            }
          } break;
        case 7: if (ok10) {
            strcpy(poz32, "X");
            ok10 = 0;
            left--;
            if (a[2][1] == 1) {
              corect++;
              strcpy(poz32, "$");
              Serial.println(corect);
            }
          } break;
        case 11: if (ok11) {
            strcpy(poz33, "X");
            ok11 = 0;
            left--;
            if (a[2][2] == 1) {
              corect++;
              strcpy(poz33, "$");
              Serial.println(corect);
            }
          } break;
        case 15: if (ok12) {
            strcpy(poz34, "X");
            ok12 = 0;
            left--;
            if (a[2][3] == 1) {
              corect++;
              strcpy(poz34, "$");
              Serial.println(corect);
            }
          } break;
        case 4: if (ok13) {
            strcpy(poz41, "X");
            ok13 = 0;
            left--;
            if (a[3][0] == 1) {
              corect++;
              strcpy(poz41, "$");
              Serial.println(corect);
            }
          } break;
        case 8: if (ok14) {
            strcpy(poz42, "X");
            ok14 = 0;
            left--;
            if (a[3][1] == 1) {
              corect++;
              strcpy(poz42, "$");
              Serial.println(corect);
            }
          } break;
        case 12: if (ok15) {
            strcpy(poz43, "X");
            ok15 = 0;
            left--;
            if (a[3][2] == 1) {
              corect++;
              strcpy(poz43, "$");
              Serial.println(corect);
            }
          } break;
        case 16: if (ok16) {
            strcpy(poz44, "X");
            ok16 = 0;
            left--;
            if (a[3][3] == 1) {
              corect++;
              strcpy(poz44, "$");
              Serial.println(corect);
            }
          } break;
      }
    }
    if (keyValue == 13) {
      digitalWrite(ledPin, !digitalRead(ledPin)); // toggles LED ON/OFF
    }
    else {
      digitalWrite(ledPin, LOW);
    }
    readKey = false; // rest the flag
    delay(debounce); // debounce
  }
  if (mapa == 0)
  {
    Serial.println(prim1);
    Serial.println(prim2);
    switch (prim1)
    {
      case '1': a[0][0] = 1; break;
      case '2': a[0][1] = 1; break;
      case '3': a[0][2] = 1; break;
      case '4': a[0][3] = 1; break;
      case '5': a[1][0] = 1; break;
      case '6': a[1][1] = 1; break;
      case '7': a[1][2] = 1; break;
      case '8': a[1][3] = 1; break;
      case '9': a[2][0] = 1; break;
      case 'a': a[2][1] = 1; break;
      case 'b': a[2][2] = 1; break;
      case 'c': a[2][3] = 1; break;
      case 'd': a[3][0] = 1; break;
      case 'e': a[3][1] = 1; break;
      case 'f': a[3][2] = 1; break;
      case 'g': a[3][3] = 1; break;
    }
    switch (prim2)
    {
      case '1': a[0][0] = 1; break;
      case '2': a[0][1] = 1; break;
      case '3': a[0][2] = 1; break;
      case '4': a[0][3] = 1; break;
      case '5': a[1][0] = 1; break;
      case '6': a[1][1] = 1; break;
      case '7': a[1][2] = 1; break;
      case '8': a[1][3] = 1; break;
      case '9': a[2][0] = 1; break;
      case 'a': a[2][1] = 1; break;
      case 'b': a[2][2] = 1; break;
      case 'c': a[2][3] = 1; break;
      case 'd': a[3][0] = 1; break;
      case 'e': a[3][1] = 1; break;
      case 'f': a[3][2] = 1; break;
      case 'g': a[3][3] = 1; break;
    }
    switch (prim3)
    {
      case '1': a[0][0] = 1; break;
      case '2': a[0][1] = 1; break;
      case '3': a[0][2] = 1; break;
      case '4': a[0][3] = 1; break;
      case '5': a[1][0] = 1; break;
      case '6': a[1][1] = 1; break;
      case '7': a[1][2] = 1; break;
      case '8': a[1][3] = 1; break;
      case '9': a[2][0] = 1; break;
      case 'a': a[2][1] = 1; break;
      case 'b': a[2][2] = 1; break;
      case 'c': a[2][3] = 1; break;
      case 'd': a[3][0] = 1; break;
      case 'e': a[3][1] = 1; break;
      case 'f': a[3][2] = 1; break;
      case 'g': a[3][3] = 1; break;
    }
    switch (prim4)
    {
      case '1': a[0][0] = 1; break;
      case '2': a[0][1] = 1; break;
      case '3': a[0][2] = 1; break;
      case '4': a[0][3] = 1; break;
      case '5': a[1][0] = 1; break;
      case '6': a[1][1] = 1; break;
      case '7': a[1][2] = 1; break;
      case '8': a[1][3] = 1; break;
      case '9': a[2][0] = 1; break;
      case 'a': a[2][1] = 1; break;
      case 'b': a[2][2] = 1; break;
      case 'c': a[2][3] = 1; break;
      case 'd': a[3][0] = 1; break;
      case 'e': a[3][1] = 1; break;
      case 'f': a[3][2] = 1; break;
      case 'g': a[3][3] = 1; break;
    }
    switch (prim5)
    {
      case '1': a[0][0] = 1; break;
      case '2': a[0][1] = 1; break;
      case '3': a[0][2] = 1; break;
      case '4': a[0][3] = 1; break;
      case '5': a[1][0] = 1; break;
      case '6': a[1][1] = 1; break;
      case '7': a[1][2] = 1; break;
      case '8': a[1][3] = 1; break;
      case '9': a[2][0] = 1; break;
      case 'a': a[2][1] = 1; break;
      case 'b': a[2][2] = 1; break;
      case 'c': a[2][3] = 1; break;
      case 'd': a[3][0] = 1; break;
      case 'e': a[3][1] = 1; break;
      case 'f': a[3][2] = 1; break;
      case 'g': a[3][3] = 1; break;
    }
  }
  u8g.firstPage();
  do {
    if (mapa > 0)
    {
      pauza();
      pauza2();
      pauza3();
    }
    else
    {
      if (left > 0)
        ramas();
      else
      {
        numai();
        start = 1;
      }
      draw11(); draw12(); draw13(); draw14();
      draw21(); draw22(); draw23(); draw24();
      draw31(); draw32(); draw33(); draw34();
      draw41(); draw42(); draw43(); draw44();
    }
  } while ( u8g.nextPage() );
}
void scanRow() {
  for (int j = row1; j < (row4 + 1); j++) {
    digitalWrite(j, HIGH);
  }
  digitalWrite(rowCounter , LOW); // switch on one row
}
void readColumn() {
  foundColumn = digitalRead(columnCounter);
  if (foundColumn == 0) {
    foundCol = true;
  }
  else {
    foundCol = false;
    noKey = noKey + 1; // counter for number of empty columns
  }
}
